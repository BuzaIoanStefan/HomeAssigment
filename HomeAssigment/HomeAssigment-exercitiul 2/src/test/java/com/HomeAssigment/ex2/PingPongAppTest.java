package com.HomeAssigment.ex2;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.*;import java.io.ByteArrayOutputStream;import java.io.PrintStream;public class PingPongAppTest {    @Test    public void testPingPongApp() throws InterruptedException {        // Redirect System.out to capture console output        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();        PrintStream originalOut = System.out;        System.setOut(new PrintStream(outputStream));        // Record the start time        long startTime = System.currentTimeMillis();        // Run the PingPongApp in a separate thread        Thread appThread = new Thread(() -> {            try {                PingPongApp.main(new String[]{});            } catch (InterruptedException e) {                Thread.currentThread().interrupt();            }        });        appThread.start();        // Wait for the application thread to finish        appThread.join();        // Record the end time        long endTime = System.currentTimeMillis();        // Restore System.out        System.setOut(originalOut);        // Get the captured output        String output = outputStream.toString().trim();        String[] lines = output.split("\n");        // Verify that the application ran for approximately 5 seconds        long elapsedTimeMillis = endTime - startTime;        long expectedDurationMillis = 5000; // 5 seconds in milliseconds        long marginOfErrorMillis = 500; // Allow Â±100 milliseconds        assertTrue(                Math.abs(elapsedTimeMillis - expectedDurationMillis) <= marginOfErrorMillis,                "The application should run for approximately 5 seconds."        );        // Verify that the output alternates between "ping" and "pong"        for (int i = 0; i < lines.length - 1; i++) { // Skip the last line (expiration message)            if (i % 2 == 0) {                assertEquals("ping", lines[i], "Expected 'ping' at even index " + i);            } else {                assertEquals("pong", lines[i], "Expected 'pong' at odd index " + i);            }        }        // Verify the expiration message        assertEquals("The 5 seconds have expired !", lines[lines.length - 1], "Expected expiration message");    }}